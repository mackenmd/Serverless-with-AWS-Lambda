[00:00:00]
>> Scott Moss: Serverless, like what is that mean and what is the difference between Serverless and the framework severs. So know when people say the word serverless, they're actually not talking about the framework. The framework does a really good job for taking that name serverless, but most some people say, I'm using a Serverless architecture, they're probably not talking about them using this framework of servers that we're gonna be doing.

[00:00:19]
They're just saying, we have a functions as a service architecture on Lambda, or Azure, or Google. That's normally what they're saying. Now, yes, that's what we're doing today too. But we're also gonna be using a framework called Serverless. Good SCL for them, cuz that's a good name. But basically, the sweet thing about Serverless, the framework, is that It's, you could think of it as like a build system and an environment around all the platforms that have functions as a service, and it kind of give us like a common API to interact with those functions.

[00:00:50]
So it doesn't matter where we deploy to, in fact, if we go to Serverless and we click on docs, you can see they support all these providers, AWS, Azure, Google, OpenWhisk, Kubeless, Spotinst, and Webtasks, and probably some other stuff. So they pretty much support everything with a single API, which allows you to do some pretty interesting things.

[00:01:13]
And you can, it helps you bundle, package, go to CI, go to deployment, all different types of things. So that's why Serverless is great. Without Serverless, Lambda's actually, it's actually a lot easier now than it used to be at the age of us, updated some stuff, and I'll show you what that looks like.

[00:01:29]
But it's still pretty difficult for someone who doesn't have extensive experience with some type of Cloud platform to deploy these types of functions. But Serverless makes it like, stupid, like If you can deploy to a CDN hosting site like Netlify or anything, then you can deploy a Lambda function, like that's how simple it is with Serverless.

