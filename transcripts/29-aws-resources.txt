[00:00:02]
>> Scott Moss: So let's get onto the good part. So this is it, there's no more lessons for the rest of today. The rest of the time, I just wanna show you some of the resources and things that I've been working with, and things to look forward to. And then just open it up for any questions about what you may be doing with Serverless and some of the stuff I might have talked about today that I said I'll get to later.

[00:00:20]
Just remind me. So some of the things I wanted to see is, basically just like. Actually this one is really cool. So Cloudcraft, if you need to put together some AWS diagrams, this one is really cool. Basically it allows you to either connect to your AWS account. And it will pull in resources that are connected and draw diagrams for you, or you can put them together.

[00:00:44]
It will also tell you how much these things cost on a monthly, weekly, whatever, basis, so it's really cool. And it's really great for just showing diagrams. So yeah, I recommend using this if you need to show infrastructure diagrams for AWS. It pretty much knows everything, especially if you login with your AWS account.

[00:01:01]
It's provisioning everything. So it's really cool. Another one is basically, remember I said connecting to database in Lambda is like painful. That's because it is. [COUGH] Unless you're using like Diamond DB which make sense, cuz that's Amazon's database. But that's also because the rise of Serverless has created what's called Serverless databases.

[00:01:24]
So if you were to type in Serverless databases, you would get so much stuff. The first one you would see, wow, Amazon took over that fast. Okay, this just launched. Amazon Aurora, which is basically like an auto scaling SQL database basically. They already had Aurora, now they have Aurora Serverless, which is, it spins up the database and only charges you when you access it, whereas a regular Aurora is always running.

[00:01:52]
Aurora is like their SQL post [INAUDIBLE] base database system, so now they have a Serverless version of it which is really cool. So this ties into the Serverless model. And I even have to manage this database. And I'm pretty sure this one's like available globally and pretty much all that stuff.

[00:02:10]
So definitely check this one out. Pretty easy. You can see it's like 0.06 cents for a one ACU, which is an ACU is like every time you hit the database, so yeah. Check that out. Another one you might see is, there's so much stuff on here.
>> Scott Moss: Actually, I'm just gonna type in.

[00:02:34]
I thought it would show up on Google, but it's not. So faunadv is a new one, start up out of San Francisco. Just recently raised some dough, so they're trying to do exciting things. But this one is a global transactional NoSQL database. And what makes these databases Serverless is that you don't manage their connection, you're actually just access them over HTTP, kinda like an API.

[00:02:59]
That's how you access it, but it's not so raw in low levels on API, they have SDKs that you can integrate with. But at the end of the day, those SDKs are just calling HTTP based APIs. So that's why they're Serverless, because you don't manage a connection, and you can spin up databases and close down databases or whatever you want.

[00:03:16]
The sweet thing about Fauna is that it's as easy to make a new database as it is to make a post request to a to-do app. So that means, before you might have thought about the trade offs of multi-tenant systems where you have a system where you have this data provision across different customers.

[00:03:35]
But provisioning a new database for every single customer is really expensive and tedious, so you just don't do it. And you stick with multi-tenant within the database, but putting a customer ID on everything. But with Fauna, you can just put up a new database, because you don't get charged unless you use it anyway.

[00:03:50]
So everybody gets their own database and then you just need like one database that manages the database names of everybody else's database. So it's pretty cool. You can do stuff like that now whereas before that was really tough to do. You'd have to manage all those databases and have to provision them and your application probably wouldn't be self-served, because people would have to wait until the databases get spun up, and stuff like that, well, I was like it's just on the fly.

[00:04:12]
So pretty cool, how we're gonna check them out. There's a learning curve to their syntax, but it seems to be pretty legit. Another one which I think is very promising is Azure's Cosmo DB which is also pretty new too. This one I really like, because it's a DB that's globally distributed and it's a multi-model.

[00:04:36]
Basically it's SQL, no SQL, and Graph at the same time. And you can pick which model you want. And because of that transitioning over to this database is really seamless. So if you have a Mongo DB actually you can transition over to Azure Cosmo DB without changing any of your code.

[00:04:53]
You can still use the same Mongos if you want and just connect to this database. And that will just work. And so it's actually pretty seamless, and the sweet thing about it is that is globally distributed. So that's really good if we're gonna be doing globally distributed apps using Lambda.

